{"version":3,"sources":["gameHelpers.js","tetrominos.js","hooks/useStage.js","components/Cell.js","components/Stage.js","components/Display.js","components/Button.js","components/PlayGround.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","components/App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","O","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Container","styled","div","props","Cell","type","React","memo","width","height","Stage","gameOver","setCoordinate","onMouseMove","event","movementX","ms","now","Date","getTime","delay","className","Display","text","CustomButton","button","Button","callback","dropTime","onClick","Basic","css","PlayGround","setDropTime","setGameOver","setPlayer","useCallback","STAGE_WIDTH","usePlayer","updatePlayerPos","score","setScore","rows","setRows","level","setLevel","linePoints","calculateScore","useGameStatus","coordinate","movePlayer","dir","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oLAGO,SAASA,IACd,OAAOC,MAAMC,KAAKD,MAHQ,KAGa,kBACrC,IAAIA,MALmB,IAKAE,KAAK,CAAC,EAAG,aAI7B,SAASC,EAAgBC,EAAQC,EAAjC,GACL,IADsE,IAApBC,EAAmB,EAAtBC,EAAaC,EAAS,EAAZC,EAChDA,EAAI,EAAGA,EAAIL,EAAOM,UAAUC,OAAQF,IAC3C,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAOM,UAAUD,GAAGE,OAAQJ,IAE9C,GAA+B,IAA3BH,EAAOM,UAAUD,GAAGF,MAQnBF,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,KACzBH,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,IACa,UAAjED,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,GAAO,IAE1D,OAAO,E,kBCzBJO,EAAa,CACxBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,SAC1BC,EAAG,CACDF,MAAO,CACL,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,MAAO,SCJJ,SAASE,EAASd,EAAQe,GAAc,IAAD,EAClBC,mBAASrB,KADS,mBACrCM,EADqC,KAC9BgB,EAD8B,OAEND,mBAAS,GAFH,mBAErCE,EAFqC,KAExBC,EAFwB,KAoD5C,OAhDAC,qBAAU,WACRD,EAAe,GAEf,IAcME,EAAc,SAAAC,GAElB,IAAMC,EAAWD,EAAUE,KAAI,SAAAC,GAAG,OAChCA,EAAID,KAAI,SAAAE,GAAI,MAAiB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAgBxD,OAZA1B,EAAOM,UAAUqB,SAAQ,SAACF,EAAKpB,GAC7BoB,EAAIE,SAAQ,SAACC,EAAOzB,GACJ,IAAVyB,IACFL,EAASlB,EAAIL,EAAOQ,IAAIH,GAAGF,EAAIH,EAAOQ,IAAIL,GAAK,CAC7CyB,EAD6C,UAE1C5B,EAAO6B,SAAW,SAAW,iBAOpC7B,EAAO6B,UACTd,IAlCc,SAAAQ,GAAQ,OACxBA,EAASO,QAAO,SAACC,EAAKN,GACpB,OAA8C,IAA1CA,EAAIO,WAAU,SAAAN,GAAI,OAAgB,IAAZA,EAAK,OAC7BP,GAAe,SAAAc,GAAI,OAAIA,EAAO,KAC9BF,EAAIG,QAAQ,IAAItC,MAAM2B,EAAS,GAAGhB,QAAQT,KAAK,CAAC,EAAG,WAE5CiC,IAGTA,EAAII,KAAKV,GAEFM,KACN,IAwBMK,CAAUb,IAGZA,GAGTN,GAAS,SAAAgB,GAAI,OAAIZ,EAAYY,QAC5B,CAACjC,IAEG,CAACC,EAAOgB,EAAUC,G,aCjDrBmB,EAAYC,IAAOC,IAAV,kHAGO,SAAAC,GAAK,OAAIA,EAAM5B,SAIrC,SAAS6B,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACd,OACE,cAACL,EAAD,CAAWK,KAAMA,EAAM9B,MAAOH,EAAWiC,GAAM9B,QAIpC+B,I,EAAAA,MAAMC,KAAKH,GCbpBJ,EAAYC,IAAOC,IAAV,qjBAEmB,SAAAC,GAAK,OAAIA,EAAMK,SAClB,SAAAL,GAAK,OAAIA,EAAMM,UAAsB,SAAAN,GAAK,OAAIA,EAAMK,SAkDpEE,I,EAAAA,EA7Bf,YAAoD,IAAnCC,EAAkC,EAAlCA,SAAU/C,EAAwB,EAAxBA,MAAOgD,EAAiB,EAAjBA,cAmBhC,OACE,eAAC,EAAD,CAAWJ,MAAO5C,EAAM,GAAGM,OAAQuC,OAAQ7C,EAAMM,OAAQ2C,YAZpC,SAACC,GAClBA,EAAMC,WACJD,EAAMC,WAAa,GAAKD,EAAMC,UAAY,KARpC,SAACC,GAGb,IAFA,IAAMC,GAAM,IAAIC,MAAOC,WAEhB,IAAID,MAAOC,UAAYF,EAAMD,KAQhCI,CAAM,IACNR,EAAcE,EAAMC,aAMxB,UACGJ,GAAY,qBAAKU,UAAU,YAAf,uBACZzD,EAAMuB,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAACE,EAAMvB,GAAP,OACxB,cAAC,EAAD,CAAcuC,KAAMhB,EAAK,IAAdvB,aCjDbkC,EAAYC,IAAOC,IAAV,sMAOJ,SAAAC,GAAK,OAAIA,EAAMQ,SAAW,MAAQ,WAY9BW,I,EAAAA,EARf,YAAsC,IAAnBX,EAAkB,EAAlBA,SAAUY,EAAQ,EAARA,KAC3B,OACE,cAAC,EAAD,CAAWZ,SAAUA,EAArB,SACGY,KCdDC,EAAevB,IAAOwB,OAAV,gIAgBHC,I,IAAAA,EARf,YAAmD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUjB,EAAY,EAAZA,SACpC,OACE,cAACa,EAAD,CAAcK,QAASF,EAAvB,SACGhB,GAAyC,OAAbiB,EAAjB,cAAqD,aCAjEE,EAAQC,YAAH,kGAML/B,EAAYC,IAAOC,IAAV,kVACX4B,EAKEA,GAgGSE,MAjFf,WAAuB,IAAD,EACYrD,mBAAS,MADrB,mBACbiD,EADa,KACHK,EADG,OAEYtD,oBAAS,GAFrB,mBAEbgC,EAFa,KAEHuB,EAFG,OCrCf,WAAsB,IAAD,EACEvD,mBAAS,CACnCR,IAAK,CAAEL,EAAG,EAAGE,EAAG,GAChBC,UAAWG,EAAW,GAAGE,MACzBkB,UAAU,IAJc,mBACnB7B,EADmB,KACXwE,EADW,KAuB1B,MAAO,CAACxE,EAhBgB,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,EAAGE,EAAkB,EAAlBA,EAAGwB,EAAe,EAAfA,SAC/B2C,GAAU,SAAAvC,GAAI,kCACTA,GADS,IAEZzB,IAAK,CAAEL,EAAI8B,EAAKzB,IAAIL,GAAKA,EAAIE,EAAI4B,EAAKzB,IAAIH,GAAKA,GAC/CwB,iBAIgB4C,uBAAY,WAC9BD,EAAU,CACRhE,IAAK,CAAEL,EAAGuE,EAAsBrE,EAAG,GACnCC,UPTGG,EAAU,EOScE,MAC3BkB,UAAU,MAEX,KDoB4C8C,GAJ3B,mBAIb3E,EAJa,KAIL4E,EAJK,KAIY7D,EAJZ,OAKmBD,EAASd,EAAQe,GALpC,mBAKbd,EALa,KAKNgB,EALM,OExCf,SAAuBC,GAAc,IAAD,EACfF,mBAAS,GADM,mBAClC6D,EADkC,KAC3BC,EAD2B,OAEjB9D,mBAAS,GAFQ,mBAElC+D,EAFkC,KAE5BC,EAF4B,OAGfhE,mBAAS,GAHM,mBAGlCiE,EAHkC,KAG3BC,EAH2B,KAKnCC,EAAa,CAAC,GAAI,IAAK,IAAK,MAE5BC,EAAiBX,uBAAY,WAE7BvD,EAAc,IAEhB4D,GAAS,SAAA7C,GAAI,OAAIA,EAAOkD,EAAWjE,EAAc,IAAM+D,EAAQ,MAC/DD,GAAQ,SAAA/C,GAAI,OAAIA,EAAOf,QAExB,CAAC+D,EAAOE,EAAYjE,IAMvB,OAJAE,qBAAU,WACRgE,MACC,CAACA,EAAgBlE,EAAa2D,IAE1B,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GF0BWG,CANtC,yBAMbR,EANa,KAMNC,EANM,KAMIC,EANJ,KAMUC,EANV,KAMmBC,EANnB,KAM0BC,EAN1B,OAQgBlE,mBAAS,GARzB,mBAQbsE,EARa,KAQDrC,EARC,KAUdsC,EAAa,SAAAC,GACZzF,EAAeC,EAAQC,EAAO,CAAEE,EAAGqF,EAAKnF,EAAG,KAC9CuE,EAAgB,CAAEzE,EAAGqF,EAAKnF,EAAG,KAoDjC,OAfAe,qBAAU,WACH4B,IACCsC,EAAa,EACfC,EAAW,GACFD,EAAa,GACtBC,GAAY,MAGf,CAACD,IGjGC,SAAqBtB,EAAUP,GACpC,IAAMgC,EAAgBC,mBAEtBtE,qBAAU,WACRqE,EAAcE,QAAU3B,IACvB,CAACA,IAEJ5C,qBAAU,WAKR,GAAc,OAAVqC,EAAgB,CAClB,IAAMmC,EAAKC,aALA,WACXJ,EAAcE,YAIelC,GAE7B,OAAO,WACLqC,cAAcF,OAGjB,CAACnC,IHiFJsC,EAAY,WA/BNhB,EAAqB,IAAbE,EAAQ,KAClBC,GAAS,SAAAjD,GAAI,OAAIA,EAAO,KAGxBqC,EAAY,KAAQW,EAAQ,GAAK,MAG9BlF,EAAeC,EAAQC,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAIxCL,EAAOQ,IAAIH,EAAI,IACjBkE,GAAY,GACZD,EAAY,OAEdM,EAAgB,CAAEzE,EAAG,EAAGE,EAAG,EAAGwB,UAAU,KAPxC+C,EAAgB,CAAEzE,EAAG,EAAGE,EAAG,EAAGwB,UAAU,MAyBzCoC,GAGD,cAAC,EAAD,UACE,sBAAKP,UAAU,SAAf,UACE,cAAC,EAAD,CAAOzD,MAAOA,EAAOgD,cAAeA,EAAeD,SAAUA,IAC7D,wBAAOU,UAAU,gBAAjB,UACE,sBAAKA,UAAU,cAAf,UACE,cAAC,EAAD,CAASE,KAAI,iBAAYiB,KACzB,cAAC,EAAD,CAASjB,KAAI,gBAAWmB,KACxB,cAAC,EAAD,CAASnB,KAAI,iBAAYqB,QAE3B,cAAC,EAAD,CAAQjB,SAzDE,WAChB/C,EAAStB,KACT2E,EAAY,KACZvD,IACAwD,GAAY,GACZO,EAAS,GACTE,EAAQ,GACRE,EAAS,IAkD0BlC,SAAUA,EAAUiB,SAAUA,aI5GtD+B,MAJf,WACE,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4be6a558.chunk.js","sourcesContent":["export const STAGE_WIDTH = 10;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport function createStage () {\r\n  return Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  );\r\n}\r\n\r\nexport function checkCollision (player, stage, { x: moveX, y: moveY }) {\r\n  for (let y = 0; y < player.tetromino.length; y++) {\r\n    for (let x = 0; x < player.tetromino[y].length; x++) {\r\n      // 1. check on an actual tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        // 2. check that move is inside the game stage hieght y\r\n        // should't go through the bottom of the stage\r\n        \r\n        // 3. check that move is inside the stage x\r\n\r\n        // 4. check that the cell moved to isn't set to clear\r\n        if (\r\n          !stage[y + player.pos.y + moveY] ||\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: 'white' },\r\n  O: {\r\n    shape: [\r\n      ['O', 'O'],\r\n      ['O', 'O'],\r\n    ],\r\n    color: 'blue',\r\n  },\r\n};\r\n\r\nexport const makeTetromino = () => {\r\n  const tetrominos = 'O';\r\n\r\n  return TETROMINOS[tetrominos];\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { createStage } from './../gameHelpers';\r\n\r\nexport function useStage(player, resetPlayer) {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage => \r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          \r\n          return ack;\r\n        }\r\n\r\n        ack.push(row);\r\n\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // first flush the stage\r\n      const newStage = prevStage.map(row => (\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      ));\r\n\r\n      // then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // then check if player collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    }\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n}\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Container = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  background-color: ${props => props.color};\r\n  border: 1px solid #ccc;\r\n`;\r\n\r\nfunction Cell({ type }) {\r\n  return (\r\n    <Container type={type} color={TETROMINOS[type].color} />\r\n  );\r\n}\r\n\r\nexport default React.memo(Cell);\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-template-rows: repeat(${props => props.height}, calc(646 / ${props => props.width}));\r\n  border: 3px solid black;\r\n  background-color: white;\r\n  position: relative;\r\n\r\n  .game-over {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.75);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 30px;\r\n    color: red;\r\n    text-shadow: -2px 0 white, 0 2px white, 2px 0 white, 0 -2px white;\r\n  }\r\n`;\r\n\r\nfunction Stage({ gameOver, stage, setCoordinate }) {\r\n  // delay function\r\n  const delay = (ms) => {\r\n    const now = new Date().getTime();\r\n\r\n    while (new Date().getTime() < now + ms) {}\r\n  }\r\n\r\n  const detectMovement = (event) => {\r\n    if (event.movementX) {\r\n      if (event.movementX > -4 && event.movementX < 4) {\r\n        // This function is for delay setting value in setCoordinate.\r\n        // So, it makes player easy to control block's position.\r\n        delay(55);\r\n        setCoordinate(event.movementX);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <Container width={stage[0].length} height={stage.length} onMouseMove={detectMovement}>\r\n      {gameOver && <div className=\"game-over\">Game Over</div>}\r\n      {stage.map(row => row.map((cell, x) => (\r\n        <Cell key={x} type={cell[0]} />\r\n      )))}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Stage;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  font-size: 18px;\r\n  color: ${props => props.gameOver ? 'red' : 'white'};\r\n  background-color: black;\r\n`;\r\n\r\nfunction Display({ gameOver, text }) {\r\n  return (\r\n    <Container gameOver={gameOver}>\r\n      {text}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst CustomButton = styled.button`\r\n  background-color: black;\r\n  font-size: 26px;\r\n  color: white;\r\n  width: 250px;\r\n  padding: 20px;\r\n`;\r\n\r\nfunction Button({ callback, dropTime, gameOver }) {\r\n  return (\r\n    <CustomButton onClick={callback}>\r\n      {gameOver ? 'Get Started' : (dropTime === null ? 'Get Started' : 'Restart')}\r\n    </CustomButton>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { usePlayer } from './../hooks/usePlayer';\r\nimport { useStage } from './../hooks/useStage';\r\nimport { useInterval } from './../hooks/useInterval';\r\nimport { useGameStatus } from './../hooks/useGameStatus';\r\n\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport Button from './Button';\r\n\r\nconst Basic = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  ${Basic}\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n\r\n  div.tetris {\r\n    ${Basic}\r\n    flex-direction: row;\r\n    column-gap: 20px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n\r\n    aside.right-section {\r\n      display: flex;\r\n      min-height: 646px;\r\n      flex-direction: column;\r\n      row-gap: 345px;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction PlayGround() {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n  const [coordinate, setCoordinate] = useState(0);\r\n  \r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  }\r\n\r\n  // reset game\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  }\r\n\r\n  const drop = () => {\r\n    // increase level when player has cleard 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n\r\n      // also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // game over\r\n      if (player.pos.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  }\r\n\r\n  // move tetromino with moving mouse\r\n  useEffect(() => {\r\n    if (!gameOver) {\r\n      if (coordinate > 0) {\r\n        movePlayer(1);\r\n      } else if (coordinate < 0) {\r\n        movePlayer(-1);\r\n      }\r\n    }\r\n  }, [coordinate]);\r\n\r\n  // drop tetromino every second(in level 0)\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"tetris\">\r\n        <Stage stage={stage} setCoordinate={setCoordinate} gameOver={gameOver} />\r\n        <aside className=\"right-section\">\r\n          <div className=\"score-board\">\r\n            <Display text={`Score: ${score}`} />\r\n            <Display text={`Rows: ${rows}`} />\r\n            <Display text={`Round: ${level}`} />\r\n          </div>\r\n          <Button callback={startGame} gameOver={gameOver} dropTime={dropTime} />\r\n        </aside>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PlayGround;\r\n","import { useCallback, useState } from 'react';\r\n\r\nimport { TETROMINOS, makeTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH } from '../gameHelpers';\r\n\r\nexport function usePlayer() {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 1 , y: 0 },\r\n      tetromino: makeTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer];\r\n}\r\n","import { useEffect, useCallback, useState } from 'react';\r\n\r\nexport function useGameStatus(rowsCleared) {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calculateScore = useCallback(() => {\r\n    // player have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calculateScore();\r\n  }, [calculateScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\n\nimport PlayGround from './PlayGround';\n\nfunction App() {\n  return <PlayGround />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}